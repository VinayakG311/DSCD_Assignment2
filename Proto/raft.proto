syntax = "proto3";

service Raft{
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesRes) {};
  rpc RequestVote(RequestVotesArgs) returns (RequestVotesRes) {};
  rpc ServeClient (ServeClientArgs) returns (ServeClientReply) {};
  // rpc ReplicateLog (AppendEntriesArgs) returns (AppendEntriesRes){};
  rpc ReplicateLogRequest(ReplicateLogRequestArgs) returns (ReplicateLogRequestRes) {};
  rpc ReplicateLogResponse(ReplicateLogResponseArgs) returns (ReplicateLogResponseRes) {};
  rpc CommitEntries(CommitArgs) returns (CommitRes) {};

}

message msg{
  string msg=1;

}
message ack{
  int32 ack=1;
}
message entry{
  int32 index = 1;
  int32 term = 2;
  int32 key = 3;
  int32 val = 4;
}

message AppendEntriesArgs{
  int32 term = 1;
  int32 leaderId = 2;
  int32 prevLogIndex = 3;
  int32 prevLogTerm = 4;
  repeated entry suffix = 5;
  int32 leaderCommit = 6;
  int32 leaseInterval = 7;
  int32 prefixLen = 8;
}

message AppendEntriesRes{
  int32 term = 1;
  bool success = 2;
}

message RequestVotesArgs{
  int32 term = 1;
  int32 candidateId = 2;
  int32 lastLogIndex = 3;
  int32 lastLogTerm = 4;
}

message RequestVotesRes{

  int32 term = 1;
  bool voteGranted = 2;
  int32 longestDurationRem = 3;
  int32 NodeId=4;
}

message ServeClientArgs {
  string Request = 1;
}

message ServeClientReply {
  string Data = 1;
  string LeaderID = 2;
  bool Success = 3;
}


message ReplicateLogRequestArgs {
  int32 leaderId = 1;
  int32 currentTerm = 2;
  int32 prefixLen = 3;
  int32 prefixTerm = 4;
  int32 commitLength = 5;
  repeated entry suffix = 6;
}

message ReplicateLogRequestRes {
  int32 nodeId = 1;
  int32 currentTerm = 2;
  int32 ackLen = 3;
  bool receivedMessage = 4;

}
message ReplicateLogResponseArgs{
  int32 followerId=1;
  int32 followerTerm = 2;
  int32 ack=3;
  bool success=4;

}
message ReplicateLogResponseRes{

}
message CommitArgs{


}
message CommitRes{

}
