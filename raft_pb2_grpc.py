# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import raft_pb2 as raft__pb2


class RaftStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AppendEntries = channel.unary_unary(
                '/Raft/AppendEntries',
                request_serializer=raft__pb2.AppendEntriesArgs.SerializeToString,
                response_deserializer=raft__pb2.AppendEntriesRes.FromString,
                )
        self.RequestVote = channel.unary_unary(
                '/Raft/RequestVote',
                request_serializer=raft__pb2.RequestVotesArgs.SerializeToString,
                response_deserializer=raft__pb2.RequestVotesRes.FromString,
                )
        self.ServeClient = channel.unary_unary(
                '/Raft/ServeClient',
                request_serializer=raft__pb2.ServeClientArgs.SerializeToString,
                response_deserializer=raft__pb2.ServeClientReply.FromString,
                )
        self.ReplicateLogRequest = channel.unary_unary(
                '/Raft/ReplicateLogRequest',
                request_serializer=raft__pb2.ReplicateLogRequestArgs.SerializeToString,
                response_deserializer=raft__pb2.ReplicateLogRequestRes.FromString,
                )
        self.ReplicateLogResponse = channel.unary_unary(
                '/Raft/ReplicateLogResponse',
                request_serializer=raft__pb2.ReplicateLogResponseArgs.SerializeToString,
                response_deserializer=raft__pb2.ReplicateLogResponseRes.FromString,
                )
        self.CommitEntries = channel.unary_unary(
                '/Raft/CommitEntries',
                request_serializer=raft__pb2.CommitArgs.SerializeToString,
                response_deserializer=raft__pb2.CommitRes.FromString,
                )


class RaftServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServeClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateLogRequest(self, request, context):
        """rpc ReplicateLog (AppendEntriesArgs) returns (AppendEntriesRes){};
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateLogResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=raft__pb2.AppendEntriesArgs.FromString,
                    response_serializer=raft__pb2.AppendEntriesRes.SerializeToString,
            ),
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=raft__pb2.RequestVotesArgs.FromString,
                    response_serializer=raft__pb2.RequestVotesRes.SerializeToString,
            ),
            'ServeClient': grpc.unary_unary_rpc_method_handler(
                    servicer.ServeClient,
                    request_deserializer=raft__pb2.ServeClientArgs.FromString,
                    response_serializer=raft__pb2.ServeClientReply.SerializeToString,
            ),
            'ReplicateLogRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateLogRequest,
                    request_deserializer=raft__pb2.ReplicateLogRequestArgs.FromString,
                    response_serializer=raft__pb2.ReplicateLogRequestRes.SerializeToString,
            ),
            'ReplicateLogResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateLogResponse,
                    request_deserializer=raft__pb2.ReplicateLogResponseArgs.FromString,
                    response_serializer=raft__pb2.ReplicateLogResponseRes.SerializeToString,
            ),
            'CommitEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitEntries,
                    request_deserializer=raft__pb2.CommitArgs.FromString,
                    response_serializer=raft__pb2.CommitRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Raft/AppendEntries',
            raft__pb2.AppendEntriesArgs.SerializeToString,
            raft__pb2.AppendEntriesRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Raft/RequestVote',
            raft__pb2.RequestVotesArgs.SerializeToString,
            raft__pb2.RequestVotesRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServeClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Raft/ServeClient',
            raft__pb2.ServeClientArgs.SerializeToString,
            raft__pb2.ServeClientReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplicateLogRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Raft/ReplicateLogRequest',
            raft__pb2.ReplicateLogRequestArgs.SerializeToString,
            raft__pb2.ReplicateLogRequestRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplicateLogResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Raft/ReplicateLogResponse',
            raft__pb2.ReplicateLogResponseArgs.SerializeToString,
            raft__pb2.ReplicateLogResponseRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Raft/CommitEntries',
            raft__pb2.CommitArgs.SerializeToString,
            raft__pb2.CommitRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
